#include "SFApp.h"


SFApp::SFApp(std::shared_ptr<SFWindow> window) : fire(0), is_running(true), sf_window(window), score(0), lives(3){
  int canvas_w, canvas_h;
  SDL_GetRendererOutputSize(sf_window->getRenderer(), &canvas_w, &canvas_h);

  background  = make_shared<SFAsset>(SFASSET_BACKGROUND, sf_window);
  auto background_pos = Point2(canvas_w/2, canvas_h/2);
  background->SetPosition(background_pos);


  app_box = make_shared<SFBoundingBox>(Vector2(canvas_w, canvas_h), canvas_w, canvas_h);

  topB  = make_shared<SFAsset>(SFASSET_TOPB, sf_window);
  auto topB_pos = Point2(canvas_w/2, 1000);
  topB->SetPosition(topB_pos);

  player  = make_shared<SFAsset>(SFASSET_PLAYER, sf_window);
  auto player_pos = Point2(canvas_w/2, 22);
  player->SetPosition(player_pos);



  leftB  = make_shared<SFAsset>(SFASSET_SIDEB, sf_window);
  auto leftB_pos = Point2(canvas_w/99, 300);
  leftB->SetPosition(leftB_pos);

  rightB  = make_shared<SFAsset>(SFASSET_SIDEB, sf_window);
  auto rightB_pos = Point2(canvas_w/0.9, 300);
  rightB->SetPosition(rightB_pos);

  auto coin = make_shared<SFAsset>(SFASSET_COIN, sf_window);
  auto pos  = Point2((canvas_w/2), 360);
  coin->SetPosition(pos);
  coins.push_back(coin);

  //1st Row - Cars
  const int number_of_cars = 3;
  for(int i=0; i<number_of_cars; i++) {
    // place an alien at width/number_of_aliens * i
    auto car = make_shared<SFAsset>(SFASSET_ALIEN, sf_window);
    auto pos  = Point2((canvas_w/number_of_cars) * i + car->getAssetWidth(), 75.0f);
    car->SetPosition(pos);
    cars.push_back(car);
  }

  //2nd Row

  const int number_of_woods1 = 3;
   for(int i=0; i<number_of_woods1; i++) {
     auto wood1 = make_shared<SFAsset>(SFASSET_WOOD, sf_window);
     auto pos1  = Point2((canvas_w/number_of_woods1) * i + wood1->getAssetWidth(), 175.0f);
     wood1->SetPosition(pos1);
     woods1.push_back(wood1);
   }
   const int number_of_woods2 = 3;
    for(int i=0; i<number_of_woods2; i++) {
     auto wood2 = make_shared<SFAsset>(SFASSET_WOOD, sf_window);
     auto pos2  = Point2((canvas_w/number_of_woods2) * i + wood2->getAssetWidth(), 375.0f);
     wood2->SetPosition(pos2);
     woods2.push_back(wood2);
   }
    const int number_of_woods3 = 3;
     for(int i=0; i<number_of_woods3; i++) {
     auto wood3 = make_shared<SFAsset>(SFASSET_WOOD, sf_window);
     auto pos3  = Point2((canvas_w/number_of_woods3) * i + wood3->getAssetWidth(), 525.0f);
     wood3->SetPosition(pos3);
     woods3.push_back(wood3);
   }

  //3rd Row - Trucks
   const int number_of_trucks = 3;
   for(int i=0; i<number_of_trucks; i++) {
     auto truck = make_shared<SFAsset>(SFASSET_TRUCK, sf_window);
     auto pos  = Point2((canvas_w/number_of_trucks) * i + truck->getAssetWidth(), 275.0f);
     truck->SetPosition(pos);
     trucks.push_back(truck);
   }
   const int number_of_trucks2 = 3;
      for(int i=0; i<number_of_trucks; i++) {
        auto truck2 = make_shared<SFAsset>(SFASSET_TRUCK, sf_window);
        auto pos  = Point2((canvas_w/number_of_trucks2) * i + truck2->getAssetWidth(), 475.0f);
        truck2->SetPosition(pos);
        trucks2.push_back(truck2);
      }
}

SFApp::~SFApp() {


}

/**
 * Handle all events that come from SDL.
 * These are timer or keyboard events.
 */
void SFApp::OnEvent(SFEvent& event) {
  SFEVENT the_event = event.GetCode();
  switch (the_event) {
  case SFEVENT_QUIT:
    is_running = false;
    break;
  case SFEVENT_UPDATE:
    OnUpdateWorld();
    OnRender();
    break;
  /*case SFEVENT_PLAYER_LEFT:
    player->GoWest();
    break;
  case SFEVENT_PLAYER_RIGHT:
    player->GoEast();
    break;
  case SFEVENT_PLAYER_NORTH:
    player->GoNorth();
    break;
  case SFEVENT_PLAYER_SOUTH:
    player->GoSouth();
    break;
    */
  case SFEVENT_FIRE:
    fire ++;
    FireProjectile();
    break;
  }
}

int SFApp::OnExecute() {
  // Execute the app
  SDL_Event event;
  while (SDL_WaitEvent(&event) && is_running) {
    // wrap an SDL_Event with our SFEvent
    SFEvent sfevent((const SDL_Event) event);
    // handle our SFEvent
    OnEvent(sfevent);
  }
}

void SFApp::OnUpdateWorld() {

	  int canvas_w, canvas_h;
	  SDL_GetRendererOutputSize(sf_window->getRenderer(), &canvas_w, &canvas_h);

	const Uint8 *keyboardState = SDL_GetKeyboardState(NULL);

	 if(keyboardState[SDL_SCANCODE_DOWN]) {
	 player->GoSouth();
	 for( auto w : woods1){
	 if(player->CollidesWith(w)){
	player->GoNorth();}
	 }
	 for( auto w : woods2){
	 	 if(player->CollidesWith(w)){
	 	player->GoNorth();}
	 	 }
	 for( auto w : woods3){
	 	 if(player->CollidesWith(w)){
	 	player->GoNorth();}
	 	 }
	 }

	 if(keyboardState[SDL_SCANCODE_UP]) {
	 player->GoNorth();
	  for( auto w : woods1){
	  if(player->CollidesWith(w)){
	player->GoSouth();}
	 }
	  for( auto w : woods2){
	  	  if(player->CollidesWith(w)){
	  	player->GoSouth();}
	  	 }
	  for( auto w : woods3){
	  	  if(player->CollidesWith(w)){
	  	player->GoSouth();}
	  	 }
	 }

	 if(keyboardState[SDL_SCANCODE_LEFT]) {
	 player->GoWest();
	  for( auto w : woods1){
	  if(player->CollidesWith(w)){
	player->GoEast();}
	 }
	  for( auto w : woods2){
		  if(player->CollidesWith(w)){
		player->GoEast();}
		 }
	 for( auto w : woods3){
	 	  if(player->CollidesWith(w)){
	 	player->GoEast();}
	 	 }
	 }
	 if(keyboardState[SDL_SCANCODE_RIGHT]) {
	 player->GoEast();
	 for( auto w : woods1){
	 if(player->CollidesWith(w)){
	player->GoWest();}
	 }
	 for( auto w : woods2){
	 	 if(player->CollidesWith(w)){
	 	player->GoWest();}
	 	 }
	 for( auto w : woods3){
	 	 if(player->CollidesWith(w)){
	 	player->GoWest();}
	 	 }
	 }




//--------------------------------------------------------------------------------
//Coins

// Coin & Player Interaction // on collision, destroy coin, add one to score
  for(auto c:coins){
 	 if(player->CollidesWith(c)){
 		player->PlayerCoin();
  		 c->PlayerCoin();
 		 score++;
         std::cout <<"Score "<< score << std::endl;
 	 }
  }

// Coin Movement
  for( auto c: coins){for(auto c:coins){
	 	 if(player->CollidesWith(c)){
	 		player->PlayerCoin();
	  		 c->PlayerCoin();
	 		 score++;
	         std::cout <<"Score "<< score << std::endl;
	 	 }
	  }
	  c->CoinUp();
	  if(c->CollidesWith(topB)){
		  std::cout<<"check2"<<std::endl;
		  //c->CoinUp();
		  //c->setGoUp(false);
	  }
	for(auto p: projectiles){

	if(p->CollidesWith(c)){
		std::cout<<"check"<<std::endl;
	}
	  }
  }

// remove dead coins
  list<shared_ptr<SFAsset>> tmc;
  for(auto c : coins) {
    if(c->IsAlive()) {
      tmc.push_back(c);
    }
  }
coins.clear();
coins = list<shared_ptr<SFAsset>>(tmc);

//--------------------------------------------------------------------------------
//Enemies & Barriers

// Cars
for(auto a : cars) {
	  	  if(a->CollidesWith(rightB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2((canvas_w/300) , 75);
	  		  a->SetPosition(pos);
	  	  }else{
	  		 a->AlienE();
	  	  }
  }

//Truck
for(auto a : trucks) {
	  	  if(a->CollidesWith(leftB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2((canvas_w/1) , 275);
	  		  a->SetPosition(pos);
	  	  }else{
	  		 a->AlienW();
	  	  }

  }
for(auto a : trucks2) {
	  	  if(a->CollidesWith(rightB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2((canvas_w/720) , 475);
	  		  a->SetPosition(pos);
	  	  }else{
	  		 a->AlienE();
	  	  }

  }

//Wood
for(auto a : woods1) {
	  	  if(a->CollidesWith(leftB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2(canvas_w/1 , 175);
	  		a->SetPosition(pos);
	  	  }else{
	  		a->AlienW();
	  	  }
}

for(auto a : woods2) {
	  	  if(a->CollidesWith(rightB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2(canvas_w/720 , 350);
	  		a->SetPosition(pos);
	  	  }else{
	  		a->AlienE();
	  	  }
}

for(auto a : woods3) {
	  	  if(a->CollidesWith(leftB)){
	  		  a->SideCollision();
	  		  auto pos  = Point2(canvas_w/1 , 525);
	  		a->SetPosition(pos);
	  	  }else{
	  		a->AlienW();
	  	  }
}






// dead cars
  list<shared_ptr<SFAsset>> tmp;
  for(auto a : cars) {
    if(a->IsAlive()) {
      tmp.push_back(a);
    }
  }
 cars.clear();
 cars = list<shared_ptr<SFAsset>>(tmp);

// dead trucks
  list<shared_ptr<SFAsset>> tmn;
   for(auto a : trucks) {
     if(a->IsAlive()) {
       tmn.push_back(a);
     }
   }
  trucks.clear();
  trucks = list<shared_ptr<SFAsset>>(tmn);

//--------------------------------------------------------------------------------
//Projectile

//vs Cars
  for(auto p : projectiles) {
		  for(auto c: cars){
			  if(p->CollidesWith(c)) {
				  p->HandleCollision();
				  c->HandleCollision();
				  score++;
				  std::cout <<"Score "<< score << std::endl;
			  }
		  }
  }
 //vs Trucks
for(auto p: projectiles){
	for(auto t:trucks){
		if(p->CollidesWith(t)) {
			p->HandleCollisionT();
			t->HandleCollisionT();
			score++;
			std::cout <<"Score "<< score << std::endl;
		}
	}
}

//remove bullets after collision
  list<shared_ptr<SFAsset> > tmk;
  for(auto p : projectiles) {
		  if(p->IsAlive()) {
    	      tmk.push_back(p);
    }
  }
  projectiles.clear();
  projectiles = list<shared_ptr<SFAsset> >(tmk);


// Projectiles Speed
  for(auto p: projectiles) {
    p->GoNorth();
  }

//--------------------------------------------------------------------------------
//Player

// Player & Cars collision
   for(auto a : cars) {
     if(player->CollidesWith(a)) {
       player->PlayerAlien();
       a->PlayerAlien();
       if(lives !=0){
           auto pos  = Point2(canvas_w/2,22);
           player->SetPosition(pos);
    	   lives--;
    	   std::cout << "Oh no, you lost a life, try again" << " | Lifes: " << lives << std::endl;
       }else{
    	   player->SetNotAlive();
           std::cout << "Game Over" << " | Final Score: " << score << std::endl;
       }
     }
   }

if(player->IsAlive())
		{
         for(auto a : trucks) {
           if(player->CollidesWith(a)) {
             player->PlayerAlien();
             a->PlayerAlien();
           }
         }
         for(auto b : trucks2) {
           if(player->CollidesWith(b)) {
             player->PlayerAlien();
             b->PlayerAlien();
           }
         }
             if(lives !=0){
                 auto pos  = Point2(canvas_w/2,22);
                 player->SetPosition(pos);
          	   lives--;
          	   std::cout << "Oh no, you lost a life, try again" << " | Lifes: " << lives << std::endl;
             }else{
          	   player->SetNotAlive();
                 std::cout << "Game Over" << " | Final Score: " << score << std::endl;
             }
           }



/*
// Player & Trucks
      for(auto a : trucks) {
        if(player->CollidesWith(a)) {
          player->PlayerAlien();
          a->PlayerAlien();
          if(lives !=0){
              auto pos  = Point2(canvas_w/2,22);
              player->SetPosition(pos);
       	   lives--;
       	   std::cout << "Oh no, you lost a life, try again" << " | Lifes: " << lives << std::endl;
          }else{
       	   player->SetNotAlive();
              std::cout << "Game Over" << " | Final Score: " << score << std::endl;
          }
        }
      }
*/
//Player & Barrier
   if (player ->CollidesWith(topB)){ //collision
	   player->GoSouth();
	   std::cout << "Congratz, you won" << " | Score " << score << std::endl;
      }



//Wood barrier
/* for(auto a:woods1){
		 if(player->CollidesWith(a)){
			 if(player->getAssetHeight() >= a->getAssetHeight());
				 player->GoSouth();
		 }
	 }


/*
if (player ->CollidesWith(wood)){
	wood->GetPositon();
	wood->get
	player->GetPosition();


	}
}


}

   /*
for(auto p : player){
	if (p ->CollidesWith(wood)){
		p->WoodCollision();
		wood->WoodCollision();
		if(p -> GoNorth()){
			north = p->GoNorth();
			p_height = p->getAssetHeight();
			p = north - height;

		}
	}
}


	   /*if (player ->CollidesWith(wood)){
		   player->WoodCollision();
		   wood->WoodCollision();
		   int p_height = player->getAssetHeight();
		   int w_height = wood ->getAssetHeight();
		   player = -p_height - w_height;

		   //player->SetPosition((PushBack() - p_height()));
	   }
		   	  /* // murder them coins projectiles coin
	    for(auto p: projectiles){
	  	  for(auto c: coins){
	  	 	  if(p->CollidesWith(c)) {
	      	        p->HandledCollision();
	      	        c->HandledCollision();

	  		  }
	  	  }
	    }

	   */


}
void SFApp::OnRender() {
  SDL_RenderClear(sf_window->getRenderer());
background->OnRender();
  // draw the player const SDL_Rect &rect1, const SDL_Rect &rect2
player->OnRender();

  for(auto p: projectiles) {
	  p->ProjectileMovement();
    if(p->IsAlive()) {
    	p->OnRender();}
  }

  for(auto a: cars) {
    if(a->IsAlive()) {
    	a->OnRender();
    }
  }

  for(auto a: trucks) {
    if(a->IsAlive()) {
    	a->OnRender();
    }
  }

  for(auto a: trucks2) {
    if(a->IsAlive()) {
    	a->OnRender();
    }
  }

  for(auto c: woods1) {
    c->OnRender();
  }

  for(auto c: woods2) {
    c->OnRender();
  }

  for(auto c: woods3) {
    c->OnRender();
  }

  for(auto c: coins) {
    c->OnRender();
  }


 //topB->OnRender();
 leftB->OnRender();
 rightB->OnRender();
 //alien1->OnRender();

  // Switch the off-screen buffer to be on-screen
  SDL_RenderPresent(sf_window->getRenderer());
}

void SFApp::FireProjectile() {
  auto pb = make_shared<SFAsset>(SFASSET_PROJECTILE, sf_window);
  auto v  = player->GetPosition();
  pb->SetPosition(v);
  projectiles.push_back(pb);
}
